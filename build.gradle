plugins {
    id 'signing'
    id 'maven-publish'
    id("io.micronaut.library") version "3.7.7"
    id("com.github.johnrengelman.shadow") version "7.1.2" // Required by micronaut plugin, but not really used
    id("com.diffplug.spotless") version "6.18.0"
    id("io.github.gradle-nexus.publish-plugin") version "1.3.0"
}

version = project.properties['projectVersion']
if (!project.hasProperty("release"))
    version += "-SNAPSHOT"
group = "com.juanmuscaria"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'
    compileOnly 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'

    annotationProcessor("org.projectlombok:lombok")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    api("net.dv8tion:JDA:5.0.0-beta.8") {
        exclude module: 'opus-java'
    }

}

java {
    withJavadocJar()
    withSourcesJar()
}

graalvmNative.toolchainDetection = false
micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.juanmuscaria.*")
    }
}

// Configure jabel
configure([tasks.compileJava]) {
    sourceCompatibility = 16 // for the IDE support
    options.release = 8

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

spotless {
    java {
        target "**/*.java"
        removeUnusedImports()
        importOrder()
        cleanthat()
        googleJavaFormat()
        formatAnnotations()
        licenseHeaderFile 'LICENSE-HEADER'
    }
    ratchetFrom 'origin/master'
}

publishing {
    publications {
        create("mavenJava", MavenPublication.class) {
            from((SoftwareComponent) components["java"])

            pom {
                name.set(project.name)
                description.set("Micronaut library for discord bots")
                url.set("https://github.com/juanmuscaria/microcord")
                licenses {
                    license {
                        name.set("Apache License, Version 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
                    }
                }
                developers {
                    developer {
                        id.set("juanmuscaria")
                        name.set("Juan Patricio")
                        email.set("juanmuscaria@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:https://github.com/juanmuscaria/microcord")
                    developerConnection.set("scm:git:ssh://github.com/juanmuscaria/microcord.git")
                    url.set("https://github.com/juanmuscaria/microcord")
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    useGpgCmd()
    sign(publishing.publications["mavenJava"])
}

